// <auto-generated />
using System;
using EY.TalentSurfer.Support.Persistence.Sql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EY.TalentSurfer.Support.Persistence.Sql.Migrations
{
    [DbContext(typeof(TalentSurferContext))]
    [Migration("20191205194246_add-roles-admin-user")]
    partial class addrolesadminuser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EY.TalentSurfer.Domain.Certainty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ArchivingFlag");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Certainty");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 7, DateTimeKind.Unspecified).AddTicks(5055), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "1. Lost",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "0%"
                        },
                        new
                        {
                            Id = 2,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 7, DateTimeKind.Unspecified).AddTicks(8075), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "2. Forecast",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "20%"
                        },
                        new
                        {
                            Id = 3,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 7, DateTimeKind.Unspecified).AddTicks(8105), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "3. Under Discussion",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "40%"
                        },
                        new
                        {
                            Id = 4,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 7, DateTimeKind.Unspecified).AddTicks(8110), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "4. Proposal Sent",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "60%"
                        },
                        new
                        {
                            Id = 5,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 7, DateTimeKind.Unspecified).AddTicks(8114), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "5. SOW Sent",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "80%"
                        },
                        new
                        {
                            Id = 6,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 7, DateTimeKind.Unspecified).AddTicks(8117), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "6. SOW Approved",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "100%"
                        });
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ArchivingFlag");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(2468), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Anywhere",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8350), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Anywhere LATAM",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8403), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Anywhere INDIA",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8408), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "US",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8411), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Anywhere ARG",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8415), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Anywhere CO",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8419), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Pune",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8422), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Bangalore",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8426), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "CABA",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8429), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "CBA",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8433), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "RO",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8436), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "MDZ",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8440), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Bogota",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 0, DateTimeKind.Unspecified).AddTicks(8443), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Medellin",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.Opportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertaintyId");

                    b.Property<string>("Contact");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("EyId");

                    b.Property<string>("HiringManager");

                    b.Property<int?>("MapId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("OriginalOpptCopy");

                    b.Property<string>("Owner");

                    b.Property<int?>("PrimaryLocationId");

                    b.Property<string>("Product");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("ProposalFolder");

                    b.Property<string>("RequestedByEmail");

                    b.Property<string>("RequestedByName");

                    b.Property<DateTime>("RequestedOn");

                    b.Property<int?>("ServiceLineId");

                    b.Property<int>("Sow");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("CertaintyId");

                    b.HasIndex("MapId");

                    b.HasIndex("PrimaryLocationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ServiceLineId");

                    b.HasIndex("StatusId");

                    b.ToTable("Opportunity");
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.OpportunityLocation", b =>
                {
                    b.Property<int>("OpportunityId");

                    b.Property<int>("LocationId");

                    b.HasKey("OpportunityId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("OpportunityLocation");
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ArchivingFlag");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.HasKey("Id");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 2, DateTimeKind.Unspecified).AddTicks(8650), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "** Not Needed **",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(807), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = ".Net Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(832), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "BI Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(836), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "BPM Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(839), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Business Analyst",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(843), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Business Intelligence",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(846), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Data Architect",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(850), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Data Scientist",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(853), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "DBA",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(857), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "DevOps/Cloud Engineer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(860), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Java Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(863), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Mobile Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(867), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Performance Test Engineer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(871), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Project Manager",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(874), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Python Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(878), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "QC Analyst",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 17,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(881), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Salesforce Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 18,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(885), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Scrum Master",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 19,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(888), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Service Now Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 20,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(892), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Sharepoint Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 21,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(895), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "SOA Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 22,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(899), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "SQL Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 23,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(903), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Test Automation Engineer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 24,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(906), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Tech Manager",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 25,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "SME",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 26,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(913), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "User Experience Designer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 27,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(916), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Visual Designer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 28,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(920), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Web UI Developer",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.PositionEY", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ArchivingFlag");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PositionEY");
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.PositionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ArchivingFlag");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.HasKey("Id");

                    b.ToTable("PositionStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 6, DateTimeKind.Unspecified).AddTicks(4654), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "** Not Needed **",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 6, DateTimeKind.Unspecified).AddTicks(7414), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "1. No Candidates",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 6, DateTimeKind.Unspecified).AddTicks(7442), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "2. Internal FIT",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 6, DateTimeKind.Unspecified).AddTicks(7447), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "3. Canfirmed (NOW)",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 6, DateTimeKind.Unspecified).AddTicks(7451), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "4. Confirmed (Future)",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ArchivingFlag");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.Property<bool>("Revoked");

                    b.Property<string>("Token");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.Seniority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ArchivingFlag");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.HasKey("Id");

                    b.ToTable("Seniority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(6382), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "** Not Needed **",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(8500), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Trainee",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(8524), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Junior",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(8528), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Junior Adv",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(8531), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "SSr",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(8535), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "SSr Adv",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(8539), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Senior",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(8542), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "SD / Level 2",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(8546), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Architect / Level 3",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(8549), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Level 4",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 5, DateTimeKind.Unspecified).AddTicks(8553), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Level 5",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.ServiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ArchivingFlag");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.HasKey("Id");

                    b.ToTable("ServiceLine");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 4, DateTimeKind.Unspecified).AddTicks(4341), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Platform",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 4, DateTimeKind.Unspecified).AddTicks(6711), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "ATTG",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 4, DateTimeKind.Unspecified).AddTicks(6750), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "GTP",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 4, DateTimeKind.Unspecified).AddTicks(6758), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Business",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.Sow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ArchivingFlag");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sow");
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ArchivingFlag");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset>("ModifiedOn");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(6853), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Wating for Feedback",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(8900), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "On Hold",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(8924), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Lost",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            ArchivingFlag = false,
                            CreatedBy = "Initial Data Load",
                            CreatedOn = new DateTimeOffset(new DateTime(2019, 12, 5, 19, 42, 46, 3, DateTimeKind.Unspecified).AddTicks(8928), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "Won",
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.Opportunity", b =>
                {
                    b.HasOne("EY.TalentSurfer.Domain.Certainty", "Certainty")
                        .WithMany()
                        .HasForeignKey("CertaintyId");

                    b.HasOne("EY.TalentSurfer.Domain.Opportunity", "Map")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.HasOne("EY.TalentSurfer.Domain.Location", "PrimaryLocation")
                        .WithMany()
                        .HasForeignKey("PrimaryLocationId");

                    b.HasOne("EY.TalentSurfer.Domain.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("EY.TalentSurfer.Domain.ServiceLine", "ServiceLine")
                        .WithMany()
                        .HasForeignKey("ServiceLineId");

                    b.HasOne("EY.TalentSurfer.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("EY.TalentSurfer.Domain.OpportunityLocation", b =>
                {
                    b.HasOne("EY.TalentSurfer.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EY.TalentSurfer.Domain.Opportunity", "Opportunity")
                        .WithMany("AdditionalOpportunityLocations")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EY.TalentSurfer.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EY.TalentSurfer.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EY.TalentSurfer.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EY.TalentSurfer.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
